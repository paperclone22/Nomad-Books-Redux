plugins {
	id "fabric-loom" version "1.8-SNAPSHOT"
	id "maven-publish"
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

base {
	archivesName = project.name
}

loom {
	accessWidenerPath = file("src/main/resources/nomad_books.accesswidener")
}

version = "${project.mod_version}-${project.minecraft_version}"
group = project.maven_group
compatible_minecraft_versions = project.compatible_minecraft_versions

processResources {
	filesMatching("**/fabric.mod.json") {
		expand(project.properties)
	}
}

repositories {
	maven {
		name "Modrinth"
		url "https://api.modrinth.com/maven"
	}
//	maven {
//		name "Shedaniel | Cloth Config"
//		url "https://maven.shedaniel.me/"
//	}
	maven {
		name "terraformersmc"
		url "https://maven.terraformersmc.com/releases/"
	}

	maven {
		name 'Xander Maven'
		url 'https://maven.isxander.dev/releases/'
	}
	maven {
		name 'Xander Snapshot'
		url 'maven.isxander.dev/snapshots/'
	}
	flatDir {
		dirs "libs"
	}
	mavenCentral()
}

//fabricApi {
//	configureDataGeneration()
//}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

//	Mod menu and YACL
	modApi "com.terraformersmc:modmenu:${project.modmenu_version}"
	modImplementation("dev.isxander:yet-another-config-lib:${project.yacl_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
}

processResources {
	inputs.property "version", project.version
	inputs.property "minecraft_version", project.minecraft_version
	inputs.property "loader_version", project.loader_version

	filesMatching("fabric.mod.json") {
		expand "version": project.version,
			"minecraft_version": project.minecraft_version,
			"loader_version": project.loader_version
	}
}

tasks {
	runClient {
		doFirst {
			copy {
				from configurations.modImplementation
				into "run/mods"
			}
		}
	}
}


tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

publishing {
	publications {
//		mavenJava(MavenPublication) {
//			from components.java
//		}
	}

	repositories {
	}
}
